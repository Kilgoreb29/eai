<?xml version="1.0" encoding="utf-8"?>
<hfsm name="Targetting">
	<states default="Idle">
		<state name="Idle">
			<variables>
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="100" y="100" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry></event_entry>
			<event_exit></event_exit>
			<event_update>
                unit.SetTargetLocation(unit.GetPosition());
                
                time += DeltaTime;
                if (time &lt; 1.0) return CONTINUE;

                time = 0;
                return REEVALUTATE;
            </event_update>
		</state>
		<state name="Follow">
			<variables>
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="300" y="100" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry></event_entry>
			<event_exit></event_exit>
			<event_update>
                time += DeltaTime;
                if (time &gt; 0.25)
                {
                    unit.SetTargetLocation(unit.GetGroup().GetFormationMemberDest(unit));
                    time = 0;

                    return REEVALUTATE;
                }

                return CONTINUE;
            </event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="1" y="0.3" />
				<position_destination x="0" y="0.3" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return FAIL;

                vector pos = leader.GetPosition();
                if (vector.Distance(pos, unit.GetPosition()) &gt; 50.0) return FAIL;

                return SUCCESS;
            </guard>
			<event name="" />
			<from_state name="Idle" />
			<to_state name="Follow" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="0" y="0.7" />
				<position_destination x="1" y="0.7" />
			</editor_data>
			<guard>
                auto group = unit.GetGroup();
                if (!group) return FAIL;

                auto leader = group.GetLeader();
                if (!leader) return SUCCESS;

                vector pos = leader.GetPosition();
                if (vector.Distance(pos, unit.GetPosition()) &gt; 50.0) return SUCCESS;

                return FAIL;
            </guard>
			<event name="" />
			<from_state name="Follow" />
			<to_state name="Idle" />
		</transition>
	</transitions>
</hfsm>